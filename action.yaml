#------------------------------------------------------------------------------
# Sends a message to a Microsoft Teams channel URI.
#
# Each sending user sending messages will need a Teams channel URI for each channel
# being targeted.  This URI identifies the user by name and optionally a profile image
# and also includes a secret that authenticates the operation.  You can obtain channel
# URIs by following:
#
#   https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using
#
# Channel URIs are secrets and should be persisted to the 1Password account for the user
# and obtained at runtime via the noenFORGE deployment mechanisms.
#
# NOTE: The nforgeio-actions/neon-environment action automatically loads the 
#       user-devops/TEAM_DEVOPS_CHANNEL[value] URI into the env.TEAM_DEVOPS_CHANNEL
#       variable, making this available for subsequent actions in a workflow.

# IMPLEMENTATION NOTES:
# ---------------------
# We're sending actionable cards using the Legacy Actionable Message format because the 
# new Adaptive Card format is not currently supported by Microsoft Teams:
#
#   https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference
#   https://messagecardplayground.azurewebsites.net/
#
# This is a great overview for how card messages work:
#
#   https://poszytek.eu/en/microsoft-en/microsoft-message-cards-the-ultimate-guide/

name: send-team-message
description: "Sends a message to a Microsoft Teams channel URI"
inputs:
  channel-uri:
    description: "Specifies the target Teams channel URI"
    required: true
  summary:
    description: "Specifies the brief card summary"
    required: true
  title:
    description: "Specifies the card title"
    required: true
  themeColor:
    description: 
runs:
  using: composite
  steps:
  - shell: pwsh
    run: |
    
      # Verify that we're running on a properly configured neonFORGE jobrunner 
      # and import the deployment and action scripts from neonCLOUD.
      
      # NOTE: This assumes that the required [$NC_ROOT/Powershell/*.ps1] files
      #       in the current clone of the repo on the runner are up-to-date
      #       enough to be able to obtain secrets and use GitHub Action functions.
      #       If this is not the case, you'll have to manually pull the repo 
      #       first on the runner.
      
      $ncRoot = $env:NC_ROOT
      
      if (![System.IO.Directory]::Exists($ncRoot))
      {
          throw "Runner Config: neonCLOUD repo is not present."
      }
      
      $ncPowershell = [System.IO.Path]::Combine($ncRoot, "Powershell")
      
      Push-Location $ncPowershell
      . ./includes.ps1
      Pop-Location
      
      # Loads an environment variable into the current job environment.
      
      function LoadVariable
      {
          [CmdletBinding()]
          param (
              [Parameter(Position=0, Mandatory=1)]
              [string]$variable
          )
          
          $value = [System.Environment]::GetEnvironmentVariable($variable)
          
          if ([System.String]::IsNullOrEmpty($value))
          {
             throw "The [$variable] environment variable does not exist."
          }
          
          Set-ActionEnvironmentVariable $variable $value
      }
      
      # COMPUTERNAME is a special case
      
      $computername = [System.Net.Dns]::GetHostName()
      Set-ActionEnvironmentVariable "COMPUTERNAME" $computername
      
      # Load the environment variables
      
      LoadVariable NF_REPOS
      LoadVariable NF_BUILD
      LoadVariable NF_CACHE
      LoadVariable NF_CODEDOC
      LoadVariable NF_ROOT
      LoadVariable NF_SAMPLES_CADENCE
      LoadVariable NF_SNIPPETS
      LoadVariable NF_TEMP
      LoadVariable NF_TEST
      LoadVariable NF_TOOLBIN
 
      LoadVariable NC_ACTIONS_ROOT
      LoadVariable NC_BUILD
      LoadVariable NC_CACHE
      LoadVariable NC_NUGET_DEVFEED
      LoadVariable NC_NUGET_VERSIONER
      LoadVariable NC_REPOS
      LoadVariable NC_ROOT
      LoadVariable NC_TEMP
      LoadVariable NC_TEST
      LoadVariable NC_TOOLBIN
      
      # Set the master 1Password environment variable and
      # load important secrets into the process environment
      # as well as the job environment.
      
      $masterPassword = ${{ inputs.master-password }}
      
      if (![System.String]::IsNullOrEmpty($masterPassword))
      {
          [System.Environment]::SetEnvironmentVariable("MASTER_PASSWORD", $masterPassword)
          
          # Reads a 1Password secret and adds it to the process and
          # job environment variables.
          
          function LoadSecret
          {
              [CmdletBinding()]
              param (
                  [Parameter(Position=0, Mandatory=1)]
                  [string]$variable,
                  [Parameter(Position=1, Mandatory=1)]
                  [string]$secretName
              )
              
              $value = GetSecretValue -name $secretName -masterPassword $masterPassword -nullOnNotFound $true
              
              if (![System.String]::IsNullOrEmpty($value))
              {
                  [System.Environment]::SetEnvironmentVariable($variable, $value)
                  Set-ActionEnvironmentVariable $variable $value
              }
          }
          
          LoadSecret "AWS_ACCESS_KEY_ID"     "AWS_ACCESS_KEY_ID[password]"
          LoadSecret "AWS_SECRET_ACCESS_KEY" "AWS_SECRET_ACCESS_KEY[password]"
          LoadSecret "DOCKER_USERNAME"       "DOCKER_LOGIN[username]"
          LoadSecret "DOCKER_PASSWORD"       "DOCKER_LOGIN[password]"
          LoadSecret "GITHUB_USERNAME"       "GITHUB_LOGIN[username]"
          LoadSecret "GITHUB_PASSWORD"       "GITHUB_LOGIN[password]"
          LoadSecret "GITHUB_PAT"            "GITHUB_PAT[password]"
          LoadSecret "NEONFORGE_USERNAME"    "NEONFORGE_LOGIN[username]"
          LoadSecret "NEONFORGE_PASSWORD"    "NEONFORGE_LOGIN[password]"
          LoadSecret "NUGET_PUBLIC_KEY"      "NUGET_PUBLIC_KEY[password]"
          LoadSecret "NUGET_VERSIONER_KEY"   "NUGET_VERSIONER_KEY[password]"
          LoadSecret "NUGET_DEVFEED_KEY"     "NUGET_DEVFEED_KEY[password]"
          LoadSecret "TEAM_DEVOPS_CHANNEL"   "TEAM_DEVOPS_CHANNEL[value]"
      }
