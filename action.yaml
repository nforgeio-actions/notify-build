#------------------------------------------------------------------------------
# FILE:         action.yaml
# CONTRIBUTOR:  Jeff Lill
# COPYRIGHT:    Copyright (c) 2005-2021 by neonFORGE LLC.  All rights reserved.
#
# The contents of this repository are for private use by neonFORGE, LLC. and may not be
# divulged or used for any purpose by other organizations or individuals without a
# formal written and signed agreement with neonFORGE, LLC

#------------------------------------------------------------------------------
# Sends a message to a Microsoft Teams channel URI.
#
# Each sending user sending messages will need a Teams channel URI for each channel
# being targeted.  This URI identifies the user by name and optionally a profile image
# and also includes a secret that authenticates the operation.  You can obtain channel
# URIs by following:
#
#   https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using
#
# Channel URIs are secrets and should be persisted to the 1Password account for the user
# and obtained at runtime via the noenFORGE deployment mechanisms.

# IMPLEMENTATION NOTES:
# ---------------------
# We're sending actionable cards using the Legacy Actionable Message format because the 
# new Adaptive Card format is not currently supported by Microsoft Teams:
#
#   https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference
#   https://messagecardplayground.azurewebsites.net/
#
# This is a great overview for how card messages work:
#
#   https://poszytek.eu/en/microsoft-en/microsoft-message-cards-the-ultimate-guide/

name: send-team-message
description: "Sends a message to a Microsoft Teams channel URI"
inputs:
  channel:
    description: "Specifies the target Teams channel URI"
    required: true
  operation:
    description: "Identifies the operation performed"
    required: true
  start-time:
    description: "Indicates when the operation started"
    required: true
  end-time:
    description: "Indicates when the operation finished"
    required: true
  elapsed-time:
    description: "Indicates how long the operation took"
    required: true
  status:
    description: "Operations status, one of: 'ok', 'warning', or 'failed'"
    required: true
runs:
  using: composite
  steps:
  - shell: pwsh
    run: |
      # $hack(jefflill):
      #
      # I just figured out that input values are not made available as
      # "INPUT_name" environment variables for composite actions like 
      # this one.  The GitHub documentation doesn't mention this and 
      # this has been driving me nuts for hours.  It looks like GitHub
      # actions are really designed for javascript or Docker and not
      # really for scripting languages like Powershell and Bash, although
      # they talk about them a lot.
      #
      # The weird thing is that the inputs are actually available here
      # via string interpolation, GitHub just doesn't set the environment
      # variables.  We're going hack that up ourselves.
      
      [System.Environment]::SetEnvironmentVariable("INPUT_channel", "${{ channel }}")
      [System.Environment]::SetEnvironmentVariable("INPUT_operation", "${{ operation }}")
      [System.Environment]::SetEnvironmentVariable("INPUT_start-time", "${{ start-time }}")
      [System.Environment]::SetEnvironmentVariable("INPUT_end-time", "${{ end-time }}")
      [System.Environment]::SetEnvironmentVariable("INPUT_elapsed-time", "${{ elapsed-time }}")
      [System.Environment]::SetEnvironmentVariable("INPUT_status", "${{ status }}")
      
      # Call the script
      
      ${{ github.action_path }}/script.ps1

